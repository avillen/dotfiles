#################### GLOBALS ####################

global !p

def tab(n):
  return " " * n

def build_opts(t):
  if t:
    lines = t.splitlines()
    if lines:
      result = ""
      for line in lines:
        result += ":" + str.strip(line).split('=', 1)[0]
      return result
    return ":" + t
  else:
    return ":"

def build_case(t):
  if t:
    lines = t.splitlines()
    if len(lines) > 0:
      result = ""
      for line in lines:
        aux = str.strip(line).split('=', 1)[0]
        result += tab(6) + aux + ")\n"
        result += tab(8) + aux + "=\"${OPTARGS:-$" + aux + "}\"\n"
        result += tab(8) + ";;\n"
      return result
    return ""

def build_helper(t):
  if t:
    lines = t.splitlines()
    if len(lines) > 0:
      result = ""
      for line in lines:
        aux = str.strip(line).split('=', 1)[0]
        result += tab(2) + "echo \" -" + aux + " <>\"" + "\n"
      return result
    return ""
endglobal


snippet init "Basic template" b
#!/bin/sh
# vim: ai:ts=8:sw=8:noet

################################################################################
# Prints a help
#
help() {
`!p snip.rv = build_helper(t[1])`
  exit 1
}


################################################################################
# Main
#
main() {
  # Default values
  ${1:a=5}

  while getopts "`!p snip.rv = build_opts(t[1])`" o; do
    case "${o}" in
`!p snip.rv = snip.mkline(build_case(t[1]))`
      *)
         help
         ;;
    esac
  done
  shift $((OPTIND-1))
}

main "$@"
endsnippet

snippet fun "Defines a basic function" b
################################################################################
# ${2:Description}
#
${1:func_name}() {
  $0
}
endsnippet
