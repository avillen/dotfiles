snippet logd
Logger.debug(inspect(__MODULE__, ${1:function_name}, ${2:reason}))
endsnippet

snippet logi
Logger.info(inspect(__MODULE__, ${1:function_name}, ${2:reason}))
endsnippet

snippet logw
Logger.warngin(inspect(__MODULE__, ${1:function_name}, ${2:reason}))
endsnippet

snippet loge
Logger.error(inspect(__MODULE__, ${1:function_name}, ${2:reason}))
endsnippet

snippet case
case ${1} do
${2} ->
${3}
end
endsnippet

snippet def
def ${1:name} do
${2}
end
endsnippet

snippet defin "def function(n), do: n"
def ${1:name},  do: ${2}
endsnippet

snippet defim
defimpl ${1:protocol_name}, for: ${2:data_type} do
${3}
end
endsnippet

snippet defmo
defmodule ${1:module_name} do
${2}
end
endsnippet

snippet defp
defp ${1:name} do
${2}
end
endsnippet

snippet doc
@moduledoc """
${1}
"""
endsnippet

snippet imp
import ${1:module_name}, only: [${2:function_name}:${3:arity}]
endsnippet

snippet ali "alias old-module to shorthand"
alias ${1:module_name}
endsnippet

snippet test
test "${1:test_name}" do
${2}
end
endsnippet

